<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	
	<context:annotation-config />
	<context:component-scan base-package="com.kekeinfo.web" />
	
	<!-- Async -->
	<bean id="executorService" class="java.util.concurrent.Executors"
    	factory-method="newFixedThreadPool">
    	<constructor-arg value="10" />
	</bean>
 
	<task:executor id="threadPoolTaskExecutor" pool-size="10" />
	<task:annotation-driven executor="executorService" />
	
	<!-- Maps '/' requests to the 'home' view -->
	<mvc:view-controller path="/" view-name="water"/>
	<!-- <mvc:annotation-driven /> -->

	<mvc:interceptors>     
		<!-- Changes the locale when a 'locale' request parameter is sent; e.g. /?locale=de -->    
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"/>
		
 		<mvc:interceptor>
  			<mvc:mapping path="/water/**"/>
  			<bean class="com.kekeinfo.web.filter.WaterFilter" />
 		</mvc:interceptor>
	</mvc:interceptors>
	  	
	<bean id="reportJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.kekeinfo.web.utils.ReportJob" />
		</property>
		<property name="targetMethod" value="autoReport" />
		<!-- 作业不并发调度  对于相同的JobDetail，当指定多个Trigger时, 很可能第一个job完成之前，第二个job就开始了。
		定concurrent设为false，多个job不会并发运行，第二个job将不会在第一个job完成之前开始
		 -->
		<property name="concurrent" value="false" />
	</bean>

	<bean id="reportTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">   
        <property name="jobDetail" ref="reportJob" />   
        <property name="cronExpression"> 
            <value>0 0 7,16,23 * * ?</value>   
        </property>   
    </bean>  
    
    <!-- monitor point status -->
    <bean id="autoModbusJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.kekeinfo.web.services.controller.system.ModbusListener" />
		</property>
		<property name="targetMethod" value="autoControllByProjects" />
		<property name="concurrent" value="false" />
	</bean>  
<!--     	格式: [秒] [分] [小时] [日] [月] [周] [年] 
        	eg. 0 0/32 8,12 * * ?  //每天8:32,12:32 执行一次
        	    0 15 10 * * ?  //每天上午10:15 触发 
 -->
	<bean id="modbusTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">   
        <property name="jobDetail" ref="autoModbusJob" />   
        <property name="cronExpression"> 
            <value>0 */1 * * * ?</value>   
        </property>   
    </bean>  
    <!-- monitor point status end -->
    
    <!-- restart modbus begin-->
    <bean id="restartModbusJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.kekeinfo.web.services.controller.system.ModbusListener" />
		</property>
		<property name="targetMethod" value="restart" />
		<property name="concurrent" value="false" />
	</bean>  
	<bean id="restartModbusTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">   
        <property name="jobDetail" ref="restartModbusJob" />   
        <property name="cronExpression"> 
            <value>0 10 0 * * ?</value>   
        </property>   
    </bean>  
    <!-- restart modbus end-->
    
    <!-- clear point data for current table begin -->
    <bean id="clearPointdataJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.kekeinfo.web.utils.PointdataJob" />
		</property>
		<property name="targetMethod" value="clearPointdata" />
		<!-- 作业不并发调度  对于相同的JobDetail，当指定多个Trigger时, 很可能第一个job完成之前，第二个job就开始了。
		定concurrent设为false，多个job不会并发运行，第二个job将不会在第一个job完成之前开始
		 -->
		<property name="concurrent" value="false" />
	</bean>

	<bean id="clearPointdataTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">   
        <property name="jobDetail" ref="clearPointdataJob" />   
        <property name="cronExpression"> 
        	<!-- 每天凌晨1点清理当前表的过期数据 -->
            <value>0 0 1 * * ? </value>   
        </property>   
    </bean>  
    <!-- clear point data for current table end -->
    <!-- 要执行任务的任务类。 -->
    <bean id="ResetJob" class="com.kekeinfo.web.admin.service.ResetJob">
        <property name="scheduler" ref="schedulerFactoryBean"></property>
    </bean>
    <!-- auto open shut for current table begin -->
    <bean id="autoSendJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.kekeinfo.web.utils.AutoSend" />
		</property>
		<property name="targetMethod" value="autoSend" />
		<!-- 作业不并发调度  对于相同的JobDetail，当指定多个Trigger时, 很可能第一个job完成之前，第二个job就开始了。
		定concurrent设为false，多个job不会并发运行，第二个job将不会在第一个job完成之前开始
		 -->
		<property name="concurrent" value="false" />
	</bean>

	<bean id="autoSendTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">   
        <property name="jobDetail" ref="autoSendJob" />   
        <property name="cronExpression"> 
        	<!-- 每分钟 -->
            <value>0 30 11 * * ? </value>   
        </property>   
    </bean>  
    <!-- auto open shut for current table end -->
    
	<bean id="schedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="reportTrigger" />
				<ref bean="modbusTrigger"/>
				<!-- <ref bean="restartModbusTrigger"/> -->
				<ref bean="clearPointdataTrigger" />
				<ref bean="autoSendTrigger" />
			</list>
		</property>
		<!-- 延迟启动 60s -->
		<property name="startupDelay" value="60"/>
		<property name="waitForJobsToCompleteOnShutdown" value="true" />
	</bean>  
	 
</beans>